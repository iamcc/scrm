// Generated by CoffeeScript 1.7.1
var async;

async = require('async');


/*
db.tb_module_shake_data.find().forEach(function(doc){
  db.tb_module_shake_data.update({_id: doc._id}, {$set:{AddTime: doc._id.getTimestamp().getTime()/1000}});
});
 */

module.exports = function(db, db2, toObjectId) {
  var __type;
  db.bind('tb_module_shake_data');
  __type = '摇一摇';
  return {
    run: function(time, callback) {
      var getMembers, updateLogs, updateMembers, updateOpenIds, _time;
      _time = new Date;
      console.log('begin shake');
      getMembers = function(cb) {
        return db.tb_module_shake_data.aggregate([
          {
            $match: {
              AddTime: {
                $gt: time
              }
            }
          }, {
            $group: {
              _id: '$MemberID',
              TIDs: {
                $addToSet: '$TID'
              },
              Contacts: {
                $addToSet: {
                  Name: '$Name',
                  Mobile: '$Mobile'
                }
              },
              LogIds: {
                $push: '$_id'
              }
            }
          }
        ], function(err, docs) {
          var members;
          members = {};
          docs.forEach(function(member) {
            return members[member._id] = {
              GuestId: member._id,
              TIDs: member.TIDs,
              Contacts: member.Contacts.filter(function(c) {
                return c.Name;
              }),
              LogIds: member.LogIds
            };
          });
          return cb(err, members);
        });
      };
      updateOpenIds = function(cb, rst) {
        return db.tb_module_member.aggregate([
          {
            $match: {
              _id: {
                $in: Object.keys(rst.members).map(function(id) {
                  return toObjectId(id);
                })
              }
            }
          }, {
            $unwind: '$OAuth'
          }, {
            $group: {
              _id: '$OAuth.OpenID',
              MemberIDs: {
                $addToSet: '$_id'
              },
              NickNames: {
                $addToSet: '$NickName'
              }
            }
          }
        ], function(err, docs) {
          docs = docs.map(function(m) {
            var contacts, logIds, tIds;
            contacts = [];
            tIds = [];
            logIds = [];
            m.MemberIDs.forEach(function(mid) {
              var member;
              member = rst.members[mid];
              member.Contacts.forEach(function(c) {
                return contacts.push(c);
              });
              member.TIDs.forEach(function(tid) {
                return tIds.push(tid);
              });
              return member.LogIds.forEach(function(lid) {
                return logIds.push(lid);
              });
            });
            return {
              OpenId: m._id,
              NickName: m.NickNames[m.NickNames.length - 1],
              Contacts: contacts,
              TIDs: tIds,
              LogIds: logIds
            };
          });
          rst.members = docs;
          return cb(err);
        });
      };
      updateMembers = function(cb, rst) {
        return async.each(rst.members, function(member, cbEach) {
          return db2.members.update({
            OpenId: member.OpenId
          }, {
            $set: {
              OpenId: member.OpenId,
              NickName: member.NickName
            },
            $addToSet: {
              Contacts: {
                $each: member.Contacts
              },
              TIDs: {
                $each: member.TIDs
              },
              Tags: __type
            }
          }, {
            upsert: true
          }, cbEach);
        }, cb);
      };
      updateLogs = function(cb, rst) {
        return async.each(rst.members, function(member, cbEach) {
          return db.tb_module_shake_data.find({
            _id: {
              $in: member.LogIds
            }
          }).toArray(function(err, logs) {
            logs = logs.map(function(log) {
              return {
                OpenId: member.OpenId,
                Mobile: log.Mobile,
                Name: log.Name,
                AddTime: log.AddTime,
                TID: log.TID,
                DataId: log.ShakeID,
                Type: __type
              };
            });
            if (logs.length) {
              return db2.logs.insert(logs, cbEach);
            } else {
              return cbEach();
            }
          });
        }, cb);
      };
      return async.auto({
        members: getMembers,
        updateOpenIds: ['members', updateOpenIds],
        updateMembers: ['updateOpenIds', updateMembers],
        updateLogs: ['updateOpenIds', updateLogs]
      }, function(err) {
        console.log('end shake', new Date - _time);
        return callback(err);
      });
    }
  };
};
