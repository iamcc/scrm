// Generated by CoffeeScript 1.7.1
var async;

async = require('async');

module.exports = function(db, db2, toObjectId) {
  var viewTypes;
  db.bind("tb_module_oauth_member");
  db.bind("tb_module_activity_awards_log");
  db.bind("tb_module_activity_data");
  db.bind("tb_module_member");
  db.bind('tb_module_oauth_guest');
  viewTypes = {
    0: '刮刮卡',
    1: '大转盘',
    2: '老虎机',
    3: '大吉大利',
    4: '幸福满袋',
    6: '摇钱树'
  };
  return {
    run: function(time, callback) {
      var getActivityType, getMembers, updateLogs, updateMembers, updateOpenids, _time;
      _time = new Date;
      console.log('begin activity');
      getActivityType = function(cb, rst) {
        return db.tb_module_activity_data.find({}, {
          fields: {
            ViewType: 1
          }
        }).toArray(function(err, docs) {
          var types;
          types = {};
          docs.forEach(function(type) {
            return types[type._id] = viewTypes[type.ViewType];
          });
          return cb(err, types);
        });
      };
      getMembers = function(cb, rst) {
        return db.tb_module_activity_awards_log.aggregate([
          {
            $match: {
              AddTime: {
                $gt: time
              }
            }
          }, {
            $group: {
              _id: '$MemberID',
              Contacts: {
                $addToSet: {
                  Name: '$Contact',
                  Mobile: '$Mobile'
                }
              },
              TIDs: {
                $addToSet: '$TID'
              },
              Tags: {
                $addToSet: '$ActivityID'
              },
              LogIds: {
                $push: '$_id'
              }
            }
          }
        ], function(err, docs) {
          var members;
          members = {};
          docs.forEach(function(m) {
            return members[m._id] = {
              MemberID: m._id,
              Contacts: m.Contacts.filter(function(mm) {
                return mm.Name;
              }),
              TIDs: m.TIDs,
              Tags: m.Tags.map(function(tag) {
                return rst.types[tag];
              }),
              LogIds: m.LogIds
            };
          });
          return cb(err, members);
        });
      };
      updateOpenids = function(cb, rst) {
        var ids, k, m;
        ids = (function() {
          var _ref, _results;
          _ref = rst.members;
          _results = [];
          for (k in _ref) {
            m = _ref[k];
            _results.push(m.MemberID);
          }
          return _results;
        })();
        return async.auto([
          function(cb2) {
            return db.tb_module_member.aggregate([
              {
                $match: {
                  _id: {
                    $in: ids
                  }
                }
              }, {
                $unwind: '$OAuth'
              }, {
                $group: {
                  _id: '$OAuth.OpenID',
                  MemberIDs: {
                    $addToSet: '$_id'
                  },
                  NickName: {
                    $last: '$NickName'
                  }
                }
              }
            ], function(err, docs) {
              docs = docs.map(function(m) {
                var contacts, logIds, tIds, tags;
                contacts = [];
                tIds = [];
                tags = [];
                logIds = [];
                m.MemberIDs.forEach(function(mid) {
                  var member;
                  member = rst.members[mid];
                  member.Contacts.forEach(function(c) {
                    return contacts.push(c);
                  });
                  member.TIDs.forEach(function(tid) {
                    return tIds.push(tid);
                  });
                  member.Tags.forEach(function(tag) {
                    return tags.push(tag);
                  });
                  return member.LogIds.forEach(function(lid) {
                    return logIds.push(lid);
                  });
                });
                return {
                  OpenId: m._id,
                  NickName: m.NickName,
                  Contacts: contacts,
                  TIDs: tIds,
                  Tags: tags,
                  LogIds: logIds
                };
              });
              return cb2(err, docs);
            });
          }, function(cb2) {
            return db.tb_module_oauth_member.find({
              MemberID: {
                $in: ids
              }
            }).toArray(function(err, docs) {
              docs = docs.map(function(member) {
                return {
                  OpenId: member.WxOpenID,
                  NickName: member.RawData && member.RawData.nickname || '',
                  Contacts: rst.members[member.MemberID].Contacts,
                  TIDs: rst.members[member.MemberID].TIDs,
                  Tags: rst.members[member.MemberID].Tags,
                  LogIds: rst.members[member.MemberID].LogIds
                };
              });
              return cb2(err, docs);
            });
          }
        ], function(err, rst2) {
          rst.members = rst2[0].concat(rst2[1]);
          return cb(err);
        });
      };
      updateLogs = function(cb, rst) {
        return async.each(rst.members, function(member, cbEach) {
          return db.tb_module_activity_awards_log.find({
            _id: {
              $in: member.LogIds
            }
          }).toArray(function(err, logs) {
            logs = logs.map(function(log) {
              return {
                OpenId: member.OpenId,
                AwardsId: log.AwardsID,
                Mobile: log.Mobile,
                Name: log.Contact,
                AddTime: log.AddTime,
                TID: log.TID,
                DataId: log.ActivityID,
                Type: rst.types[log.ActivityID]
              };
            });
            return db2.logs.insert(logs, cbEach);
          });
        }, function(err) {
          return cb(err);
        });
      };
      updateMembers = function(cb, rst) {
        return async.each(rst.members, function(member, cbEach) {
          return db2.members.update({
            OpenId: member.OpenId
          }, {
            $set: {
              OpenId: member.OpenId,
              NickName: member.NickName
            },
            $addToSet: {
              Contacts: {
                $each: member.Contacts
              },
              TIDs: {
                $each: member.TIDs
              },
              Tags: {
                $each: member.Tags
              }
            }
          }, {
            upsert: true
          }, cbEach);
        }, cb);
      };
      return async.auto({
        types: getActivityType,
        members: ['types', getMembers],
        openids: ['members', updateOpenids],
        updateMembers: ['openids', updateMembers],
        logs: ['openids', 'types', updateLogs]
      }, function(err) {
        console.log('end activity', new Date - _time);
        return callback(err);
      });
    }
  };
};
