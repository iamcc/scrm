async = require 'async'

module.exports = (db, db2, toObjectID) ->
  db.bind "tb_module_oauth_member"
  db.bind "tb_module_activity_awards_log"
  db.bind "tb_module_activity_data"
  db.bind "tb_module_member"

  {
    run : (time, callback) ->
      viewTypes =
        0 : '刮刮卡'
        1 : '大转盘'
        2 : '老虎机'
        3 : '大吉大利'
        4 : '幸福满袋'
        6 : '摇钱树'

      getMembers = (cb, rst) ->
        _time = new Date()
        console.log 'begin get members'

        db.tb_module_activity_awards_log.aggregate [
          $group :
            _id :
              TID : '$TID'
              MemberID : '$MemberID'
            Contacts : $addToSet : { Mobile : '$Mobile', Name : '$Contact' }
        ]
        , (err, docs) ->
          return cb err if err

          console.log 'get', docs.length, 'members', new Date() - _time

          docs = docs.map (m) -> {
            TID      : m._id.TID
            MemberID : m._id.MemberID
            Contacts : m.Contacts
          }

          rst.ids = []
          members = {}

          for member in docs
            rst.ids.push member.MemberID
            member.Contacts = member.Contacts.filter (c) -> c.Name
            members[member.MemberID] = member

          cb null, members

          console.log 'end get members', new Date() - _time
        return

      getVisitorIDs = (cb, rst) ->
        _time = new Date
        console.log 'begin get visitors id'

        db.tb_module_member.find
          _id: $in: rst.ids
        ,
          fields :
            PiwikVisitorID : 1
        .toArray (err, docs) ->
          console.log 'get', docs.length, 'visitors id', new Date() - _time

          dict = {}
          docs.forEach (d) -> dict[d._id] = d.PiwikVisitorID
          cb err, dict

          console.log 'end get visitors id', new Date() - _time
        return

      getOpenIds = (cb, rst) ->
        _time = new Date
        console.log 'begin get openids'

        db.tb_module_oauth_member.find
          MemberID: $in: rst.ids
        ,
          fields :
            MemberID : 1
            WxOpenID : 1
        .toArray (err, docs) ->
          console.log 'get', docs.length, 'openids', new Date() - _time

          dict = {}
          docs.forEach (d) -> dict[d.MemberID] = d.WxOpenID
          cb err, dict

          console.log 'end get openids', new Date() - _time
        return

      getActivityViewTypes = (cb) ->
        _time = new Date
        console.log 'begin get activity view types'

        db.tb_module_activity_data.find {}
        , fields : ViewType : 1
        .toArray (err, types) ->
          cb err, types

          console.log 'get', types.length, 'view types', new Date() - _time
          console.log 'end get activity view types'

      awardsLog = (fn, rst) ->
        _time = new Date
        console.log 'begin awardsLog'

        logs  = []
        types = {}

        
        rst.types.map (t) -> types[t._id] = viewTypes[t.ViewType]

        console.log 'begin set members', new Date() - _time
        _time = new Date()

        rst.ids.forEach (id) ->
          if not rst.oids[id] then return delete rst.members[id]

          rst.members[id].VisitorID = rst.vids[id]
          rst.members[id].OpenID    = rst.oids[id]
          rst.members[id].Tags      = []

        console.log 'end set members', new Date() - _time
        _time = new Date()

        console.log 'begin change ids'

        ids = Object.keys(rst.members).map (id) -> toObjectID(id)

        console.log 'end change ids', new Date - _time
        _time = new Date()

        console.log 'begin get logs'

        db.tb_module_activity_awards_log.find
          MemberID : $in : ids
        .toArray (err, docs) ->
          console.log 'get', docs.length, 'logs', new Date() - _time
          console.log 'begin set logs'
          _time = new Date()

          for log in docs
            _log = {}
            _log.Type = types[log.ActivityID]
            _log.OpenID = rst.members[log.MemberID].OpenID
            _log.AddTime = log.AddTime
            _log.TID = log.TID
            _log.Mobile = log.Mobile
            _log.Name = log.Contact

            logs.push _log
            if _log.Type not in rst.members[log.MemberID].Tags then rst.members[log.MemberID].Tags.push _log.Type

          console.log 'end set logs', new Date() - _time

          fn err, logs

          console.log 'end awardsLog'

      insertMembers = (fn, rst) ->
        _time = new Date

        async.series [
          (cb) ->
            console.log 'begin remove analysis & logs'
            async.auto [
              (cb2) -> db2.analysis.remove cb2
              (cb2) -> db2.logs.remove cb2
            ], cb
          (cb) ->
            console.log 'end remove analysis & logs', new Date() - _time
            console.log 'begin insert members & logs'
            _time = new Date()
            async.auto [
              (cb2) ->
                members = []
                for id, member of rst.members
                  members.push member
                db2.analysis.insert members, cb2
              (cb2) ->
                num   = 50000.0
                pages = [0..(Math.ceil(rst.logs.length/num)-1)]
                async.each pages, (page, cb3) ->
                  docs = rst.logs.slice(page*num, page*num+num)
                  if docs.length > 0 then db2.logs.insert docs, cb3
                  else cb3()
                , cb2
            ], (err) ->
              console.log 'end insert members & logs', new Date() - _time
              cb err
        ], (err) ->
          fn err

      _time = new Date

      async.auto
        members : getMembers
        types   : getActivityViewTypes
        vids    : ['members', getVisitorIDs]
        oids    : ['members', getOpenIds]
        logs    : ['vids', 'oids', awardsLog]
        insert  : ['logs', insertMembers]
      , (err, rst) ->
        console.log 'activity done', new Date - _time, err
  }